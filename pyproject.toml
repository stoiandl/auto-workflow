[tool.poetry]
name = "auto-workflow"
version = "0.1.1"
description = "A lightweight, developer-first workflow & task orchestration engine for Python."
authors = ["andreistoica <andreilst@yahoo.ro>"]
readme = "README.md"
packages = [{ include = "auto_workflow" }]
license = "GPL-3.0-or-later"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]
homepage = "https://github.com/stoiandl/auto-workflow"
repository = "https://github.com/stoiandl/auto-workflow"
documentation = "https://stoiandl.github.io/auto-workflow/"

# Include non-Python files required by users or README rendering
include = [
    "auto_workflow/py.typed",
    "assets/logo.svg",
]

[tool.poetry.dependencies]
python = ">=3.12,<4.0"
cloudpickle = ">=3.0.0,<4.0.0"
psycopg = { version = "^3.2.10", optional = true, extras = ["binary"] }
psycopg_pool = { version = "^3.2.6", optional = true }
SQLAlchemy = { version = "^2.0.44", optional = true }
azure-storage-blob = { version = "^12.23.1", optional = true }
azure-storage-file-datalake = { version = "^12.15.0", optional = true }
azure-identity = { version = "^1.18.0", optional = true }

# Optional: define optional dev dependency groups (PEP 735 draft style). If your tooling
# doesn't yet support this, you can ignore. Pre-commit pins hook versions, so adding
# ruff/pre-commit here is not strictly required.
[tool.poetry.group.dev.dependencies]
pre-commit = "^4.3.0"  # Updated to latest
ruff = "^0.14.0"       # Updated to latest
pytest = "^8.3.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^6.0.0"
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.0"
twine = "^5.1.0"


# Ruff configuration
[tool.ruff]
# Match your supported Python version
target-version = "py312"
line-length = 100
indent-width = 4

[tool.ruff.format]
# Use Ruff's formatter (compatible with Black style by default)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "N",   # pep8-naming
]
ignore = [
    # Add rule codes here to ignore globally
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["auto_workflow"]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
# Example: tests often allow unused imports or asserts
"tests/**/*" = ["S101", "F401"]


[tool.pytest.ini_options]
testpaths = [
    "tests"
]
asyncio_mode = "auto"
markers = [
    "core: core DAG/flow/task behaviors",
    "scheduler: scheduling, priorities, failure policies",
    "dynamic: dynamic fan-out related",
    "caching: result cache behaviors",
    "artifacts: artifact store behaviors",
    "observability: tracing, metrics, middleware",
    "cli: command-line interface behavior",
    "benchmark: performance smoke tests",
    "regression: broader/edge scenarios"
]


# Coverage.py configuration (used by pytest-cov)
[tool.coverage.run]
branch = true
source = ["auto_workflow"]
omit = [
    "**/__init__.py",
    "tests/**",
    "examples/**",
    "docs/**",
    "site/**",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "if __name__ == '__main__':",
    "if TYPE_CHECKING:",
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
auto-workflow = "auto_workflow.cli:main"

[tool.poetry.extras]
# Install with: poetry install -E connectors-postgres
connectors-postgres = ["psycopg", "psycopg_pool"]
# Install with: poetry install -E connectors-sqlalchemy
connectors-sqlalchemy = ["SQLAlchemy"]
# Install with: poetry install -E connectors-adls2
connectors-adls2 = [
    "azure-storage-blob",
    "azure-storage-file-datalake",
    "azure-identity",
]

# Install with: poetry install -E connectors-all
connectors-all = [
    "psycopg",
    "psycopg_pool",
    "SQLAlchemy",
    "azure-storage-blob",
    "azure-storage-file-datalake",
    "azure-identity",
]
